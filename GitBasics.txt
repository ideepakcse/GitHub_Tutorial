1.git init -> Powers your folder to be managed by git, and initialises a new empty repository.
              It also creates a .git folder that has all the relevant logic to manage versions of your project.


2.Working Area -> There can be a bunch of files that are not currently handled by git. 
                  It means that changes done or to be done in those files are not managed by git yet. 
                  When we do git status and we see a bunch of untracked files then these are actually called to be in the working area.

NOTE:  A file which is already added for the next commit and then we make any changes to that file , 
       then that changes will be in working area and already added content of the file will be in staging area.
        
3.Staging area -> all files and chnages which are surely going to be the part of the next commit or version that we will create are in staging area
		  The moment we add the files using git add<file_name> it goes to staging area.            
		  This staging area is the place where git knows what changes will be done from the last version to the next version.


4.Repository Area -> This area actually contains the details of all you previous registered version.
                     And the files in this area, git already manages them and knows their version history.


5.git add <file> -> moves file from working area to staging area.


6.git rm --cached <file> -> moves back the whole file from staging area to untracked area/working area.


7.commit -> Commit is a particular version of the project. It captures a snapshot of the project's staged changes and creates a version out of it.


8.git commit -> registers staging changes to a commit.


9.git log -> list downs all the commits of the repository. If you want to exit out of git log prompt press q.


10.git restore <file> -> it removes all file changes from the working area that were to be added to staging area but haven't added yet.
                         This can be useful, if we did some dirty piece of code and now no more want it. 
                         Instead of deleting every change line by line, we can restore it or you can say restore last clean version of the file.


11.git restore --staged <file>->it removes all file changes that were already added to staging area and moves it back to the working area. 
                                this only works if changes are in your staging area

NOTE : Diff between git rm and git restore ans: if you want to move the whole file back to the untracked state, then we do git rm, 
       otherwise if we just want the changes to be moved in working area or staging area then we git restore.

12.git diff commit1 commit2 -> gives the difference of all file changes between two commits


13.git commit -m "<your commit message>" -> If we want to avoid opening a text editor like vim/nano to add commit message we can use this following command


14.git remote -> list down all the remote connection names


15.Remote connection -> It helps you to link two git repositories for uploading and downloading changes from each otherwise


16.git remote add <name of remote> <link of the remote> : this command helps us to add a new link to the remote repo and give a name to it


17.git remote rm <name of remote> : this command deletes a remote connection


19.git remote rename <oldname> <newname> : this command remanes the remote connection


Note: The name of the remote connection is always used to establish communication between the repos


20.git add <file1> <file2> <file3>: this command will add multiple file changes together in the staging area


21.git add .: this command will add all files from working repo to staging area.


22.git pull <remote name> <branch name> : downloads latest changes from the branch of the mentioned remote in your local repo.

NOTE: RECOMMENDED PRACTISE TO FOLLOW
- make changes
- git add <file>
- git commit 
- git pull
- git push 





